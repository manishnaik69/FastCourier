{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useAdminUsers.js\nimport { useState, useCallback } from 'react';\nimport { useAuth } from './useAuth';\nimport toast from 'react-hot-toast';\nexport const useAdminUsers = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    user\n  } = useAuth();\n  const fetchUsers = useCallback(async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      if (!token) throw new Error('No auth token');\n      const response = await fetch('http://localhost:5000/api/admin/users', {\n        headers: {\n          'Authorization': token,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch users');\n      }\n      const data = await response.json();\n      setUsers(data);\n    } catch (err) {\n      console.error('Error fetching users:', err);\n      setError(err.message);\n      toast.error('Failed to fetch users');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const updateUserStatus = async (userId, status) => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      if (!token) throw new Error('No auth token');\n      const response = await fetch(`http://localhost:5000/api/admin/user/${userId}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          status\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update user status');\n      }\n      toast.success(`User status updated to ${status}`);\n      await fetchUsers(); // Refresh the list\n    } catch (err) {\n      console.error('Error updating user status:', err);\n      toast.error(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteUser = async userId => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      if (!token) throw new Error('No auth token');\n      const response = await fetch(`http://localhost:5000/api/admin/user/${userId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': token,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete user');\n      }\n      toast.success('User deleted successfully');\n      await fetchUsers(); // Refresh the list\n    } catch (err) {\n      console.error('Error deleting user:', err);\n      toast.error(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    users,\n    loading,\n    error,\n    fetchUsers,\n    updateUserStatus,\n    deleteUser\n  };\n};\n_s(useAdminUsers, \"KiuydMv32iKOxUxYsFZtc66MqJQ=\", false, function () {\n  return [useAuth];\n});\nexport default useAdminUsers;","map":{"version":3,"names":["useState","useCallback","useAuth","toast","useAdminUsers","_s","users","setUsers","loading","setLoading","error","setError","user","fetchUsers","token","localStorage","getItem","Error","response","fetch","headers","ok","data","json","err","console","message","updateUserStatus","userId","status","method","body","JSON","stringify","success","deleteUser"],"sources":["C:/Users/Asus/Desktop/cms/manish/manish1/frontend/src/hooks/useAdminUsers.js"],"sourcesContent":["// src/hooks/useAdminUsers.js\r\nimport { useState, useCallback } from 'react';\r\nimport { useAuth } from './useAuth';\r\nimport toast from 'react-hot-toast';\r\n\r\nexport const useAdminUsers = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const { user } = useAuth();\r\n\r\n  const fetchUsers = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const token = localStorage.getItem('token');\r\n      if (!token) throw new Error('No auth token');\r\n\r\n      const response = await fetch('http://localhost:5000/api/admin/users', {\r\n        headers: {\r\n          'Authorization': token,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch users');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setUsers(data);\r\n    } catch (err) {\r\n      console.error('Error fetching users:', err);\r\n      setError(err.message);\r\n      toast.error('Failed to fetch users');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const updateUserStatus = async (userId, status) => {\r\n    try {\r\n      setLoading(true);\r\n      const token = localStorage.getItem('token');\r\n      if (!token) throw new Error('No auth token');\r\n\r\n      const response = await fetch(`http://localhost:5000/api/admin/user/${userId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Authorization': token,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ status })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update user status');\r\n      }\r\n\r\n      toast.success(`User status updated to ${status}`);\r\n      await fetchUsers(); // Refresh the list\r\n    } catch (err) {\r\n      console.error('Error updating user status:', err);\r\n      toast.error(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteUser = async (userId) => {\r\n    try {\r\n      setLoading(true);\r\n      const token = localStorage.getItem('token');\r\n      if (!token) throw new Error('No auth token');\r\n\r\n      const response = await fetch(`http://localhost:5000/api/admin/user/${userId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Authorization': token,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to delete user');\r\n      }\r\n\r\n      toast.success('User deleted successfully');\r\n      await fetchUsers(); // Refresh the list\r\n    } catch (err) {\r\n      console.error('Error deleting user:', err);\r\n      toast.error(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    users,\r\n    loading,\r\n    error,\r\n    fetchUsers,\r\n    updateUserStatus,\r\n    deleteUser\r\n  };\r\n};\r\n\r\nexport default useAdminUsers;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}