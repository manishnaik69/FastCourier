{"ast":null,"code":"const API_URL = 'http://localhost:5000/api';\nexport const courierService = {\n  createCourier: async courierData => {\n    const formData = new FormData();\n    Object.keys(courierData).forEach(key => {\n      formData.append(key, courierData[key]);\n    });\n    const response = await fetch(`${API_URL}/courier`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n      },\n      body: formData\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Failed to create shipment');\n    }\n    return data;\n  },\n  getCourier: async id => {\n    const response = await fetch(`${API_URL}/courier/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Failed to fetch shipment details');\n    }\n    return data;\n  },\n  updateTracking: async (id, trackingData) => {\n    const response = await fetch(`${API_URL}/admin/tracking-update`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        courierId: id,\n        ...trackingData\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Failed to update tracking');\n    }\n    return data;\n  },\n  trackCourier: async trackingNumber => {\n    const response = await fetch(`${API_URL}/courier/track/${trackingNumber}`);\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Failed to track shipment');\n    }\n    return data;\n  },\n  calculatePrice: async (weight, zone = 'default') => {\n    const response = await fetch(`${API_URL}/calculate-price`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n      },\n      body: JSON.stringify({\n        weight,\n        zone\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Failed to calculate price');\n    }\n    return data;\n  }\n};","map":{"version":3,"names":["API_URL","courierService","createCourier","courierData","formData","FormData","Object","keys","forEach","key","append","response","fetch","method","headers","localStorage","getItem","body","data","json","ok","Error","message","getCourier","id","updateTracking","trackingData","JSON","stringify","courierId","trackCourier","trackingNumber","calculatePrice","weight","zone"],"sources":["C:/Users/Asus/Desktop/cms/manish/manish1/frontend/src/services/courierService.js"],"sourcesContent":["const API_URL = 'http://localhost:5000/api';\r\nexport const courierService = {\r\n    createCourier: async (courierData) => {\r\n      const formData = new FormData();\r\n      Object.keys(courierData).forEach(key => {\r\n        formData.append(key, courierData[key]);\r\n      });\r\n  \r\n      const response = await fetch(`${API_URL}/courier`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n        },\r\n        body: formData\r\n      });\r\n  \r\n      const data = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to create shipment');\r\n      }\r\n  \r\n      return data;\r\n    },\r\n  \r\n    getCourier: async (id) => {\r\n      const response = await fetch(`${API_URL}/courier/${id}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n        }\r\n      });\r\n  \r\n      const data = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to fetch shipment details');\r\n      }\r\n  \r\n      return data;\r\n    },\r\n  \r\n    updateTracking: async (id, trackingData) => {\r\n      const response = await fetch(`${API_URL}/admin/tracking-update`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          courierId: id,\r\n          ...trackingData\r\n        })\r\n      });\r\n  \r\n      const data = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to update tracking');\r\n      }\r\n  \r\n      return data;\r\n    },\r\n  \r\n    trackCourier: async (trackingNumber) => {\r\n      const response = await fetch(`${API_URL}/courier/track/${trackingNumber}`);\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to track shipment');\r\n      }\r\n  \r\n      return data;\r\n    },\r\n  \r\n    calculatePrice: async (weight, zone = 'default') => {\r\n      const response = await fetch(`${API_URL}/calculate-price`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n        },\r\n        body: JSON.stringify({ weight, zone })\r\n      });\r\n  \r\n      const data = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to calculate price');\r\n      }\r\n  \r\n      return data;\r\n    }\r\n  };\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}