{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useAuth.js\nimport { useContext, useCallback } from 'react';\nimport { AuthContext } from '../context/AuthContext';\nexport const useAuth = () => {\n  _s();\n  var _context$user;\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n\n  // Enhance the login function with better error handling\n  const enhancedLogin = useCallback(async credentials => {\n    try {\n      const response = await fetch('http://localhost:5000/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Login failed');\n      }\n\n      // Validate response data\n      if (!data.token || !data.user) {\n        throw new Error('Invalid response from server');\n      }\n\n      // Call the original login function from context\n      await context.login(data);\n      return data;\n    } catch (error) {\n      // Enhance error message if needed\n      if (error.message.includes('Failed to fetch')) {\n        throw new Error('Unable to connect to server. Please check your internet connection.');\n      }\n      throw error;\n    }\n  }, [context]);\n  return {\n    ...context,\n    login: enhancedLogin,\n    // Helper methods\n    isAuthenticated: !!context.user,\n    isAdmin: ((_context$user = context.user) === null || _context$user === void 0 ? void 0 : _context$user.isAdmin) || false,\n    getToken: () => localStorage.getItem('token'),\n    hasPermission: permission => {\n      var _context$user$permiss;\n      if (!context.user) return false;\n      if (context.user.isAdmin) return true;\n      return ((_context$user$permiss = context.user.permissions) === null || _context$user$permiss === void 0 ? void 0 : _context$user$permiss.includes(permission)) || false;\n    }\n  };\n};\n_s(useAuth, \"grKKIZEZC3Ui3HPcWiX4l++JTsE=\");\nexport default useAuth;","map":{"version":3,"names":["useContext","useCallback","AuthContext","useAuth","_s","_context$user","context","Error","enhancedLogin","credentials","response","fetch","method","headers","body","JSON","stringify","data","json","ok","message","token","user","login","error","includes","isAuthenticated","isAdmin","getToken","localStorage","getItem","hasPermission","permission","_context$user$permiss","permissions"],"sources":["C:/Users/Asus/Desktop/cms/manish/manish1/frontend/src/hooks/useAuth.js"],"sourcesContent":["// src/hooks/useAuth.js\r\nimport { useContext, useCallback } from 'react';\r\nimport { AuthContext } from '../context/AuthContext';\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n\r\n  // Enhance the login function with better error handling\r\n  const enhancedLogin = useCallback(async (credentials) => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(credentials)\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Login failed');\r\n      }\r\n\r\n      // Validate response data\r\n      if (!data.token || !data.user) {\r\n        throw new Error('Invalid response from server');\r\n      }\r\n\r\n      // Call the original login function from context\r\n      await context.login(data);\r\n\r\n      return data;\r\n    } catch (error) {\r\n      // Enhance error message if needed\r\n      if (error.message.includes('Failed to fetch')) {\r\n        throw new Error('Unable to connect to server. Please check your internet connection.');\r\n      }\r\n      throw error;\r\n    }\r\n  }, [context]);\r\n\r\n  return {\r\n    ...context,\r\n    login: enhancedLogin,\r\n    // Helper methods\r\n    isAuthenticated: !!context.user,\r\n    isAdmin: context.user?.isAdmin || false,\r\n    getToken: () => localStorage.getItem('token'),\r\n    hasPermission: (permission) => {\r\n      if (!context.user) return false;\r\n      if (context.user.isAdmin) return true;\r\n      return context.user.permissions?.includes(permission) || false;\r\n    }\r\n  };\r\n};\r\n\r\nexport default useAuth;"],"mappings":";AAAA;AACA,SAASA,UAAU,EAAEC,WAAW,QAAQ,OAAO;AAC/C,SAASC,WAAW,QAAQ,wBAAwB;AAEpD,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,aAAA;EAC3B,MAAMC,OAAO,GAAGN,UAAU,CAACE,WAAW,CAAC;EAEvC,IAAI,CAACI,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;;EAEA;EACA,MAAMC,aAAa,GAAGP,WAAW,CAAC,MAAOQ,WAAW,IAAK;IACvD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;QAC9DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;MAClC,CAAC,CAAC;MAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAElC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIZ,KAAK,CAACU,IAAI,CAACG,OAAO,IAAI,cAAc,CAAC;MACjD;;MAEA;MACA,IAAI,CAACH,IAAI,CAACI,KAAK,IAAI,CAACJ,IAAI,CAACK,IAAI,EAAE;QAC7B,MAAM,IAAIf,KAAK,CAAC,8BAA8B,CAAC;MACjD;;MAEA;MACA,MAAMD,OAAO,CAACiB,KAAK,CAACN,IAAI,CAAC;MAEzB,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOO,KAAK,EAAE;MACd;MACA,IAAIA,KAAK,CAACJ,OAAO,CAACK,QAAQ,CAAC,iBAAiB,CAAC,EAAE;QAC7C,MAAM,IAAIlB,KAAK,CAAC,qEAAqE,CAAC;MACxF;MACA,MAAMiB,KAAK;IACb;EACF,CAAC,EAAE,CAAClB,OAAO,CAAC,CAAC;EAEb,OAAO;IACL,GAAGA,OAAO;IACViB,KAAK,EAAEf,aAAa;IACpB;IACAkB,eAAe,EAAE,CAAC,CAACpB,OAAO,CAACgB,IAAI;IAC/BK,OAAO,EAAE,EAAAtB,aAAA,GAAAC,OAAO,CAACgB,IAAI,cAAAjB,aAAA,uBAAZA,aAAA,CAAcsB,OAAO,KAAI,KAAK;IACvCC,QAAQ,EAAEA,CAAA,KAAMC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC7CC,aAAa,EAAGC,UAAU,IAAK;MAAA,IAAAC,qBAAA;MAC7B,IAAI,CAAC3B,OAAO,CAACgB,IAAI,EAAE,OAAO,KAAK;MAC/B,IAAIhB,OAAO,CAACgB,IAAI,CAACK,OAAO,EAAE,OAAO,IAAI;MACrC,OAAO,EAAAM,qBAAA,GAAA3B,OAAO,CAACgB,IAAI,CAACY,WAAW,cAAAD,qBAAA,uBAAxBA,qBAAA,CAA0BR,QAAQ,CAACO,UAAU,CAAC,KAAI,KAAK;IAChE;EACF,CAAC;AACH,CAAC;AAAC5B,EAAA,CAvDWD,OAAO;AAyDpB,eAAeA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}