{"ast":null,"code":"const API_URL = 'http://localhost:5000/api';\nexport const adminService = {\n  getDashboardStats: async () => {\n    try {\n      const response = await fetch(`${API_URL}/admin/dashboard`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch dashboard stats');\n      }\n      return data;\n    } catch (error) {\n      console.error('Dashboard stats error:', error);\n      throw error;\n    }\n  },\n  getUsers: async () => {\n    try {\n      const response = await fetch(`${API_URL}/admin/users`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch users');\n      }\n      return data;\n    } catch (error) {\n      console.error('Get users error:', error);\n      throw error;\n    }\n  },\n  updateUserStatus: async (userId, status) => {\n    try {\n      const response = await fetch(`${API_URL}/admin/user/${userId}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          status\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to update user status');\n      }\n      return data;\n    } catch (error) {\n      console.error('Update user status error:', error);\n      throw error;\n    }\n  },\n  getMetrics: async (dateRange = '30') => {\n    try {\n      const response = await fetch(`${API_URL}/admin/metrics?range=${dateRange}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch metrics');\n      }\n      return data;\n    } catch (error) {\n      console.error('Get metrics error:', error);\n      throw error;\n    }\n  },\n  getActivityLogs: async () => {\n    try {\n      const response = await fetch(`${API_URL}/admin/logs`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch activity logs');\n      }\n      return data;\n    } catch (error) {\n      console.error('Get activity logs error:', error);\n      throw error;\n    }\n  },\n  getPricingRules: async () => {\n    try {\n      const response = await fetch(`${API_URL}/admin/pricing`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch pricing rules');\n      }\n      return data;\n    } catch (error) {\n      console.error('Get pricing rules error:', error);\n      throw error;\n    }\n  },\n  updatePricing: async pricingData => {\n    try {\n      const response = await fetch(`${API_URL}/admin/pricing`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(pricingData)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to update pricing');\n      }\n      return data;\n    } catch (error) {\n      console.error('Update pricing error:', error);\n      throw error;\n    }\n  },\n  getCourierStats: async (startDate, endDate) => {\n    try {\n      const response = await fetch(`${API_URL}/admin/courier-stats?start=${startDate}&end=${endDate}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch courier stats');\n      }\n      return data;\n    } catch (error) {\n      console.error('Get courier stats error:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["API_URL","adminService","getDashboardStats","response","fetch","headers","localStorage","getItem","data","json","ok","Error","message","error","console","getUsers","updateUserStatus","userId","status","method","body","JSON","stringify","getMetrics","dateRange","getActivityLogs","getPricingRules","updatePricing","pricingData","getCourierStats","startDate","endDate"],"sources":["C:/Users/Asus/Desktop/cms/manish/manish1/frontend/src/services/adminService.js"],"sourcesContent":["const API_URL = 'http://localhost:5000/api';\r\n\r\nexport const adminService = {\r\n  getDashboardStats: async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/admin/dashboard`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to fetch dashboard stats');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Dashboard stats error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getUsers: async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/admin/users`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to fetch users');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Get users error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateUserStatus: async (userId, status) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/admin/user/${userId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ status })\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to update user status');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Update user status error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getMetrics: async (dateRange = '30') => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/admin/metrics?range=${dateRange}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to fetch metrics');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Get metrics error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getActivityLogs: async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/admin/logs`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to fetch activity logs');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Get activity logs error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getPricingRules: async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/admin/pricing`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to fetch pricing rules');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Get pricing rules error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updatePricing: async (pricingData) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/admin/pricing`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(pricingData)\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to update pricing');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Update pricing error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getCourierStats: async (startDate, endDate) => {\r\n    try {\r\n      const response = await fetch(\r\n        `${API_URL}/admin/courier-stats?start=${startDate}&end=${endDate}`,\r\n        {\r\n          headers: {\r\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n          }\r\n        }\r\n      );\r\n\r\n      const data = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to fetch courier stats');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Get courier stats error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}