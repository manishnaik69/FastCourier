{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\cms\\\\manish\\\\manish1\\\\frontend\\\\src\\\\context\\\\NotificationContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NotificationContext = /*#__PURE__*/createContext(null);\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const fetchNotifications = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/notifications', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n        }\n      });\n      const data = await response.json();\n      setNotifications(data);\n      setUnreadCount(data.filter(n => !n.is_read).length);\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n    }\n  };\n  useEffect(() => {\n    fetchNotifications();\n  }, []);\n  const markAsRead = async id => {\n    try {\n      await fetch(`http://localhost:5000/api/notifications/${id}/read`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n        }\n      });\n      await fetchNotifications();\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: {\n      notifications,\n      unreadCount,\n      markAsRead,\n      refreshNotifications: fetchNotifications\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationProvider, \"ZKbdJ33iEtJJ28qAyIajw14iMHg=\");\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","NotificationContext","NotificationProvider","children","_s","notifications","setNotifications","unreadCount","setUnreadCount","fetchNotifications","response","fetch","headers","localStorage","getItem","data","json","filter","n","is_read","length","error","console","markAsRead","id","method","Provider","value","refreshNotifications","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Asus/Desktop/cms/manish/manish1/frontend/src/context/NotificationContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const NotificationContext = createContext(null);\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n\r\n  const fetchNotifications = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/notifications', {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n        }\r\n      });\r\n      const data = await response.json();\r\n      setNotifications(data);\r\n      setUnreadCount(data.filter(n => !n.is_read).length);\r\n    } catch (error) {\r\n      console.error('Error fetching notifications:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchNotifications();\r\n  }, []);\r\n\r\n  const markAsRead = async (id) => {\r\n    try {\r\n      await fetch(`http://localhost:5000/api/notifications/${id}/read`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n        }\r\n      });\r\n      await fetchNotifications();\r\n    } catch (error) {\r\n      console.error('Error marking notification as read:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={{\r\n      notifications,\r\n      unreadCount,\r\n      markAsRead,\r\n      refreshNotifications: fetchNotifications\r\n    }}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,mBAAmB,gBAAGL,aAAa,CAAC,IAAI,CAAC;AAEtD,OAAO,MAAMM,oBAAoB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACpD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAEjD,MAAMY,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;QACtEC,OAAO,EAAE;UACP,eAAe,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;QAC9D;MACF,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAClCV,gBAAgB,CAACS,IAAI,CAAC;MACtBP,cAAc,CAACO,IAAI,CAACE,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACC,OAAO,CAAC,CAACC,MAAM,CAAC;IACrD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD;EACF,CAAC;EAEDvB,SAAS,CAAC,MAAM;IACdW,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMc,UAAU,GAAG,MAAOC,EAAE,IAAK;IAC/B,IAAI;MACF,MAAMb,KAAK,CAAC,2CAA2Ca,EAAE,OAAO,EAAE;QAChEC,MAAM,EAAE,KAAK;QACbb,OAAO,EAAE;UACP,eAAe,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;QAC9D;MACF,CAAC,CAAC;MACF,MAAML,kBAAkB,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC7D;EACF,CAAC;EAED,oBACErB,OAAA,CAACC,mBAAmB,CAACyB,QAAQ;IAACC,KAAK,EAAE;MACnCtB,aAAa;MACbE,WAAW;MACXgB,UAAU;MACVK,oBAAoB,EAAEnB;IACxB,CAAE;IAAAN,QAAA,EACCA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACmB,CAAC;AAEnC,CAAC;AAAC5B,EAAA,CA/CWF,oBAAoB;AAAA+B,EAAA,GAApB/B,oBAAoB;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}